===============
ANSIBLE ROLES
===============
- Ansible Roles allow you to encapsulate a specific set of tasks, files, templates, and variables into a self-contained directory structure.

- Roles let you automatically load related vars, files, tasks, handlers, and other Ansible artifacts based on a known file structure. 
  After you group your content in roles, you can easily reuse them and share them with other users.

- Ansible automatically includes any main.yml files inside specific directories that make up the role.


ROLE DIRECTORY STRUCTURE
---------------------------
- Ansible Roles follow a specific directory structure, making it easy to organize your automation code. 
  The basic structure of a role directory looks like this:

  -----
  roles/
    |--my_role/
        ├── defaults/
        │   └── main.yml
        ├── files/
        ├── handlers/
        │   └── main.yml
        ├── meta/
        │   └── main.yml
        ├── tasks/
        │   └── main.yml
        ├── templates/
        ├── tests/
        │   ├── inventory
        │   └── test.yml
        └── vars/
            └── main.yml
    -----

defaults: Default variables for the role.
files: Static files that may be needed by the role.
handlers: Handlers that can be used to trigger actions based on events.
meta: Metadata about the role, such as dependencies.
tasks: The main tasks for the role.
templates: Jinja2 templates for generating configuration files.
tests: Testing-related files.
vars: Variables specific for this Role.

- There are only two directories required to make a working Ansible role:
    role_name/ meta/
    tasks/


INVOKING A ROLE IN PLAYBOOK
-----------------------------
EXAMPLE:
    ----
    - hosts: all 
      
      roles:
        - role_name
    -----