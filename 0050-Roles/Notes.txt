===============
ANSIBLE ROLES
===============
- Ansible Roles allow you to encapsulate a specific set of tasks, files, templates, and variables into a self-contained directory structure.

- Roles let you automatically load related vars, files, tasks, handlers, and other Ansible artifacts based on a known file structure. 
  After you group your content in roles, you can easily reuse them and share them with other users.

- Ansible automatically includes any main.yml files inside specific directories that make up the role.


ROLE DIRECTORY STRUCTURE
---------------------------
- Ansible Roles follow a specific directory structure, making it easy to organize your automation code. 
  The basic structure of a role directory looks like this:

  -----
  roles/
    |--my_role/
        ├── defaults/
        │   └── main.yml
        ├── files/
        ├── handlers/
        │   └── main.yml
        ├── meta/
        │   └── main.yml
        ├── tasks/
        │   └── main.yml
        ├── templates/
        ├── tests/
        │   ├── inventory
        │   └── test.yml
        └── vars/
            └── main.yml
    -----

defaults: Default variables for the role.
files: Static files that may be needed by the role.
handlers: Handlers that can be used to trigger actions based on events.
meta: Metadata about the role, such as dependencies.
tasks: The main tasks for the role.
templates: Jinja2 templates for generating configuration files.
tests: Testing-related files.
vars: Variables specific for this Role.

- There are only two directories required to make a working Ansible role:
    role_name/ meta/
    tasks/


INVOKING A ROLE IN PLAYBOOK
-----------------------------
EXAMPLE:
    ----
    - hosts: all 
      
      roles:
        - role_name
    -----

  =====

Imagine if you had a playbook structure like:
  -----
  - hosts: appservers 
    
    roles:
    - dnf-repo-setup 
    - firewall
    - nodejs
    - app-deploy
  -----

Each one of the roles lives in its own isolated world, and can be shared with other servers and groups of servers in your infrastructure.

- A dnf-repo-setup role could enable certain repositories and import their GPG keys.
- A firewall role could have per-server or per-inventory-group options for ports and services to allow or deny.
- An app-deploy role could deploy your app to a directory (configurable per-server) and set certain app options per-server or per-group.

These things are easy to manage when you have small bits of functionality separated into different roles. 
Instead of managing 100+ lines of playbook tasks, and manually prefixing every name: with something like 
“Common |” or “App Deploy |”, you now manage a few roles with 10-20 lines of YAML each.

On top of that, when you’re building your main playbooks, they can be extremely simple (like the above example), enabling you to 
see everything being configured and deployed on a particular server without scrolling through dozens of included playbook files 
and hundreds of tasks.